import socket
import os
import sys
import zipfile
import argparse
import threading
import questionary
from tqdm import tqdm

# --- –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç –¥–ª—è GUI –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ ---
import tkinter as tk
from tkinter import filedialog

# --- –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
BUFFER_SIZE = 1024 * 1024  # 1MB
TCP_PORT = 5001
UDP_PORT = 5002
SEPARATOR = "<SEP>"

# --- –û–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ---

def get_local_ip():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(('8.8.8.8', 1))
        ip = s.getsockname()[0]
    except Exception:
        ip = '127.0.0.1'
    finally:
        s.close()
    return ip

def zip_directory(path, zip_handler):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ ZIP-–∞—Ä—Ö–∏–≤."""
    for root, dirs, files in os.walk(path):
        for file in files:
            file_path = os.path.join(root, file)
            arcname = os.path.relpath(file_path, os.path.dirname(path))
            zip_handler.write(file_path, arcname)

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: GUI –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ ---
def select_files_gui():
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø–∞–ø–æ–∫.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π.
    """
    # –°–æ–∑–¥–∞–µ–º –∏ —Å—Ä–∞–∑—É –ø—Ä—è—á–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ Tkinter, –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ
    root = tk.Tk()
    root.withdraw()

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–Ω —Ö–æ—á–µ—Ç –≤—ã–±—Ä–∞—Ç—å
    selection_type = questionary.select(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?",
        choices=["üìÑ –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã", "üìÅ –¶–µ–ª—É—é –ø–∞–ø–∫—É", "‚ùå –û—Ç–º–µ–Ω–∞"]
    ).ask()

    if selection_type is None or selection_type == "‚ùå –û—Ç–º–µ–Ω–∞":
        return []

    if selection_type == "üìÑ –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã":
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ù–ï–°–ö–û–õ–¨–ö–ò–• —Ñ–∞–π–ª–æ–≤
        # askopenfilenames –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –ø—É—Ç–µ–π, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
        filepaths = filedialog.askopenfilenames(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return list(filepaths)
    
    elif selection_type == "üìÅ –¶–µ–ª—É—é –ø–∞–ø–∫—É":
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –û–î–ù–û–ô –ø–∞–ø–∫–∏
        folderpath = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
        return [folderpath] if folderpath else []
    
    return []

# --- –†–µ–∂–∏–º —Å–µ—Ä–≤–µ—Ä–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞) ---

def send_files(filepaths):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫."""
    files_to_send = []
    temp_zip_files = []

    for path in filepaths:
        if not os.path.exists(path):
            print(f"‚ùå –û—à–∏–±–∫–∞: –ü—É—Ç—å '{path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–Ω –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
            continue
        if os.path.isdir(path):
            print(f"üóúÔ∏è  –£–ø–∞–∫–æ–≤–∫–∞ –ø–∞–ø–∫–∏ '{os.path.basename(path)}' –≤ ZIP...")
            zip_name = f"{os.path.basename(path)}.zip"
            with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
                zip_directory(path, zipf)
            files_to_send.append(zip_name)
            temp_zip_files.append(zip_name)
        else:
            files_to_send.append(path)

    if not files_to_send:
        print("üî¥ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.bind(('0.0.0.0', TCP_PORT))
    except OSError:
        print(f"üî¥ –û—à–∏–±–∫–∞: –ü–æ—Ä—Ç {TCP_PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return
        
    s.listen(1)
    
    local_ip = get_local_ip()
    print("\n‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    print(f"üñ•Ô∏è  –í–∞—à IP-–∞–¥—Ä–µ—Å: {local_ip}")
    print(f"üîí –ü–æ—Ä—Ç: {TCP_PORT}")
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞...")

    try:
        client_socket, address = s.accept()
        print(f"ü§ù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {address}")

        for filename in files_to_send:
            filesize = os.path.getsize(filename)
            print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞: {os.path.basename(filename)} ({filesize / 1e6:.2f} MB)")
            client_socket.send(f"{os.path.basename(filename)}{SEPARATOR}{filesize}".encode())

            progress = tqdm(range(filesize), f"–û—Ç–ø—Ä–∞–≤–∫–∞ {os.path.basename(filename)}", unit="B", unit_scale=True, unit_divisor=1024)
            with open(filename, "rb") as f:
                while True:
                    bytes_read = f.read(BUFFER_SIZE)
                    if not bytes_read:
                        break
                    client_socket.sendall(bytes_read)
                    progress.update(len(bytes_read))
            progress.close()

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("\nüîå –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        s.close()
        for zip_file in temp_zip_files:
            if os.path.exists(zip_file):
                os.remove(zip_file)
                print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {zip_file}")
        print("‚úÖ –ì–æ—Ç–æ–≤–æ!")

# --- –†–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ–ª—É—á–µ–Ω–∏–µ) ---

def receive_files():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤."""
    server_ip = questionary.text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:",
        validate=lambda text: True if len(text.split('.')) == 4 else "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.5)"
    ).ask()

    if not server_ip:
        return

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        print(f"‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {server_ip}:{TCP_PORT}...")
        s.connect((server_ip, TCP_PORT))
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!")

        while True:
            received = s.recv(BUFFER_SIZE).decode()
            if not received:
                break

            try:
                filename, filesize = received.split(SEPARATOR)
                filename = os.path.basename(filename)
                filesize = int(filesize)
            except ValueError:
                print("üî¥ –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.")
                continue

            print(f"\nüì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {filename} ({filesize / 1e6:.2f} MB)")
            
            progress = tqdm(range(filesize), f"–ü–æ–ª—É—á–µ–Ω–∏–µ {filename}", unit="B", unit_scale=True, unit_divisor=1024)
            with open(filename, "wb") as f:
                bytes_received = 0
                while bytes_received < filesize:
                    bytes_to_read = min(BUFFER_SIZE, filesize - bytes_received)
                    bytes_read = s.recv(bytes_to_read)
                    if not bytes_read:
                        break
                    f.write(bytes_read)
                    progress.update(len(bytes_read))
                    bytes_received += len(bytes_read)
            progress.close()

            if filename.endswith('.zip'):
                print(f"ü§ê –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ {filename}...")
                try:
                    with zipfile.ZipFile(filename, 'r') as zip_ref:
                        zip_ref.extractall()
                    os.remove(filename)
                    print(f"üóëÔ∏è  –ê—Ä—Ö–∏–≤ '{filename}' —É–¥–∞–ª–µ–Ω.")
                except zipfile.BadZipFile:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å {filename}. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")

    except socket.error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    finally:
        s.close()
        print("\n‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∑–∞–ø—É—Å–∫ ---

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∞—è –º–µ–Ω—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã."""
    parser = argparse.ArgumentParser(description="üöÄ Fast File Transfer - –±—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.")
    parser.add_argument("-s", "--send", nargs='+', help="–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏. –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º/–ø–∞–ø–∫–∞–º.")
    
    args = parser.parse_args()

    if args.send:
        send_files(args.send)
        return

    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë    üöÄ Fast File Transfer     ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")

    choice = questionary.select(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        choices=[
            'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã',
            'üì• –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã',
            'üö™ –í—ã—Ö–æ–¥'
        ]
    ).ask()

    if choice == 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã':
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –Ω–∞ GUI ---
        selected_paths = select_files_gui()
        if selected_paths:
            send_files(selected_paths)
        else:
            print("ü§∑ –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

    elif choice == 'üì• –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã':
        receive_files()
    elif choice == 'üö™ –í—ã—Ö–æ–¥' or choice is None:
        print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
        sys.exit(0)

if __name__ == "__main__":
    try:
        main()
    except (KeyboardInterrupt, TypeError):
        print("\n–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã. üëã")
        sys.exit(0)